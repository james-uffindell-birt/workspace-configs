# This is Git's per-user configuration file.
[user]
    useConfigOnly = true
    #name = James N. Uffindell
    #email = fill in as appropriate

# some actually sane color configurations
# preferably set terminal background to #13040e or #0d000d or something similarly faintly purple but v dark
# current colors used are:
# 221 - pale marigold, used for current branch
# 214 - mid orange, used for no branch (detached HEAD) and whitespace diffs
# 209 - peach, used for misc local branches
# 141 - lilac, used for remote branches, diff function names
# 107 - moss green, used for upstream branches
# 241 - dark grey, used for 'background' data
# 215 - pinkish orange, used for various meta and header information
# 117 - pale blue, used for untracked files and diff hunk information
# 160 - mid red, used for diff removals, unmerged files, and miscellaneous errors
# 148 - light green, used for diff additions, changed files, and miscellaneous help
# 064 - dark green, used for backgrounded grep matches only

#use a bunch of these, plus some extra ones, for log graphing
#TODO still sort out the other colors in lgs
[log]
    graphColors = 214,209,141,108,117,160,149,134,166,175,144,153,156,211,184

[color "branch"]
    current = 221
    local = 209
    remote = 141
    upstream = 108
    plain = 241

[color "diff"]
    #same as status header
    meta = 215
    frag = 117
    func = 141
    old = 160
    oldMoved = 209
    oldMovedAlternative = 203
    new = 149
    newMoved = 192
    newMovedAlternative = 194
    whitespace = 214 reverse
    plain = 241

[color "decorate"]
    branch = 209
    remoteBranch = 108
    HEAD = 221
    stash = 117
    tag = 148

[color "status"]
    added = 134
    branch = 221
    localBranch = 221
    remoteBranch = 108
    nobranch = 214
    changed = 149
    header = 215
    untracked = 117
    unmerged = 160

[color "interactive"]
    header = 215
    prompt = 141
    error = 160
    help = 149

[color "grep"]
    context = 241
    filename = 117
    linenumber = 117
    function = 141
    separator = 215
    match = 149
    matchContext = 64


[merge]
    # why would you not make this the default?
    conflictstyle = diff3
    tool = vimdiff

[mergetool]
    keepBackup = false

[alias]
    #STATUS
    s = status --short -b
    #show all files
    sf = status -u --short -b
    #REALLY show all files
    sff = status -u --ignored --short -b

    #full-output equivalents
    sl = status
    slf = status -u
    slff = status -u --ignored

    #CHECKOUT
    #-q added to avoid clogging up console with pointless success output
    co = checkout -q
    cob = checkout -q -b
    #work with just bits of files (from working dir to oblivion)
    cop = checkout -p
    #wipe changes to file(s) in working dir
    cor = checkout --
    #reset accidentally-resolved file to conflicting state (plus more helpful alias)
    com = checkout -m
    unresolve = checkout -m


    #ADD
    a = add
    #add all files
    aa = add -A
    #add all tracked files
    at = add -u
    #work with just bits of files (from working dir to index)
    ap = add -p
    ai = add -i

    #BRANCH
    b = branch -q
    bf = branch -q -f
    bd = branch -q -d
    bdf = branch -q -d -f
    #list branches
    bl = branch -vv
    #list full - include all branches
    blf = branch -a -vv
    bm = branch -q -m
    #set up current branch to track an upstream (quietly)
    bt = branch -q -u
    #clear tracking for current branch
    btc = branch -q --unset-upstream
    #alternative aliases for the same things
    track = branch -q -u
    untrack = branch -q --unset-upstream
    #show branches with committish in
    bwc = branch -a --contains

    #BISECT
    bs = bisect
    bsbg = bisect start
    bshg = bisect start HEAD
    bsb = bisect bad
    bsg = bisect good
    bsr = bisect reset
    bss = bisect skip
    #'e' for 'execute', since 'r' already taken
    bse = bisect run
    bsv = bisect view --oneline --graph

    #DIFF
    #diffs between HEAD and working dir (or between specified commits)
    d = diff
    dw = diff -w
    dc = diff --color-words='\\w+|[^[:space:]]'
    dcw = diff --color-words='\\w+|[^[:space:]]' -w

    #diffs between HEAD and index ("next commit")
    ds = diff --cached
    dsw = diff --cached -w
    dsc = diff --cached --color-words='\\w+|[^[:space:]]'
    dscw = diff --cached --color-words='\\w+|[^[:space:]]' -w

    #"last commit"
    dl = diff HEAD~ HEAD
    dlw = diff -w HEAD~ HEAD
    dlc = diff --color-words='\\w+|[^[:space:]]' HEAD~ HEAD
    dlcw = diff --color-words='\\w+|[^[:space:]]' -w HEAD~ HEAD

    #"specific commit"
    dd = "!git d \"$1\"~ \"$1\" #"
    ddw = "!git dw \"$1\"~ \"$1\" #"
    ddc = "!git dc \"$1\"~ \"$1\" #"
    ddcw = "!git dcw \"$1\"~ \"$1\" #"

    #for merge conflicts - what "ours" introduced in the change that is conflicting
    #diff --ours shows diff between our changes and the current conflicted file, rather than our changes and the merge-base
    do = "!git d :1:\"$1\" :2:\"$1\" #"
    doc = "!git dc :1:\"$1\" :2:\"$1\" #"
    dow = "!git dw :1:\"$1\" :2:\"$1\" #"
    docw = "!git dcw :1:\"$1\" :2:\"$1\" #"

    #for merge conflicts - what "theirs" introduced in the change that is conflicting
    dt = "!git d :1:\"$1\" :3:\"$1\" #"
    dtc = "!git dc :1:\"$1\" :3:\"$1\" #"
    dtw = "!git dw :1:\"$1\" :3:\"$1\" #"
    dtcw = "!git dcw :1:\"$1\" :3:\"$1\" #"

    #diff stats for what files changed by how much
    dsts = diff --stat=250
    dstsl = diff --stat=250 HEAD~ HEAD
    dstss = diff --stat=250 --cached
    dstsd = !"git diff --stat=250 \"$1\"~ \"$1\" #"

    #the "whoops, I forgot this file" command
    can = commit -q --amend --no-edit

    #the "whoops, I typoed that commit message" command
    reword = commit -q --amend
    ca = commit -q --amend

    c = commit -q
    #for quick commits with short messages
    cm = commit -q -m
    #for when you actually PLAN to do an interactive rebase rather than doing it last-minute
    cf = commit -q --fixup
    cs = commit -q --squash
    #maybe not worth making an alias, but:
    #commit -q -c HEAD@{1} to reuse the commit message (with editing) of wherever HEAD was before, especially good after a git rr when rebasing or amending

    cp = cherry-pick
    cpc = cherry-pick --continue
    cpq = cherry-pick --quit
    cpa = cherry-pick --abort

    f = fetch -q
    #adjust main remote as necessary
    update = fetch origin

    #MERGE
    #always try and make a merge commit when doing a merge
    mg = merge -q --no-ff
    mgff = merge -q --ff-only
    mga = merge --abort
    mgc = merge --continue

    #standard marker merge
    marker = merge --no-ff -s ours

    #REBASE
    rb = rebase -q
    rbi = rebase -q -i
    rbc = rebase --continue
    rba = rebase --abort
    rbs = rebase --skip
    rbv = rebase --edit-todo
    rbf = rebase -q -f
    rbfi = rebase -q --no-ff -i

    #rework the last N commits, eg "git redo 5" to rework the last 5 commits
    redo = !"git rebase -q -i HEAD~$1 #"

    #work with just bits of files (from index to working dir)
    rp = reset -p
    #unstage a file
    rh = reset HEAD
    #step back a commit (reset branch back but not working dir)
    rr = reset HEAD~

    #see who is winning at writing code
    stats = shortlog -sn --all --no-merges

    #WORKTREE (aka "I don't trust stash")
    wa = worktree add
    wl = worktree list
    wp = worktree prune

    #LOG
    #default option (mostly sane but lots of merges make the wraparound quite frightening)
    lg = !"git lg1"
    lgb = !"git lg1b"
    #default option but do our best to filter out the commits on other branches that got merged in
    lgs = !"git lg1 --first-parent"
    #even shorter: filter out any commit that isn't a tag, merge, or branch tip
    lgss = !"git lg1 --simplify-by-decoration"
    #shorter still! just show tags and branch tips
    lgsss = !"git lg1 --simplify-by-decoration --no-merges"
    #show only stuff reachable from local branches
    lgl = !"git lg1 --not --branches=remote"

    #show commits only in specific range
    lgr = !"git lg1-specific \"$1\"~..\"$2\" #"

    #truncated logs - default and filtered-default modes
    lgt = !"git lg -n"
    lgst = !"git lgs -n"
    lgtb = !"git lgb -n"

    #successively more verbose options, shamelessly stolen from someone helpful on stackoverflow
    lg1 = !"git lg1b --all"
    lg2 = !"git lg2b --all"
    lg3 = !"git lg3b --all"

    lg1b = log --graph --abbrev-commit --decorate --format=format:'%C(117)%h%C(reset) - %C(149)(%ar)%C(reset) %C(white)%s%C(reset) %C(241)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2b = log --graph --abbrev-commit --decorate --format=format:'%C(117)%h%C(reset) - %C(141)%aD%C(reset) %C(149)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(241)- %an%C(reset)'
    lg3b = log --graph --abbrev-commit --decorate --format=format:'%C(117)%h%C(reset) - %C(141)%aD%C(reset) %C(149)(%ar)%C(reset) %C(141)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(241)- %an <%ae> %C(reset) %C(241)(committer: %cn <%ce>)%C(reset)'

    #PICKAXE
    #commits which changed number of matching lines
    pa = log --source --all --pickaxe-regex --decorate --abbrev-commit --format=tformat:'%C(117)%h%C(reset) - %C(149)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' -S
    pav = log -p --source --all --pickaxe-regex --decorate --abbrev-commit --format=tformat:'%C(117)%h%C(reset) - %C(149)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' -S
    #commits which changed any matching lines
    pac = log --source --all --pickaxe-regex --decorate --abbrev-commit --format=tformat:'%C(117)%h%C(reset) - %C(149)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' -G
    pacv = log -p --source --all --pickaxe-regex --decorate --abbrev-commit --format=tformat:'%C(117)%h%C(reset) - %C(149)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' -G

    #file-specific history - git isn't great at this but these are sometimes useful anyway
    fl = log -u
    file = log --follow -p

    #find commits missing in remotes (or other refs)
    #list all commits that exist in local branches that are not in specified remotes (doesn't easily identify rebased commits)
    allmissing = !"git log --oneline --branches --not --remotes=$1 #"
    #list all commits that are not in first branch but are in second branch; try and be clever about identifying identical patches (rebase or cherrypick)
    missing = !"git log --oneline --cherry $1...$2 #"

#do our best to make diff output friendly for humans
[diff]
    renames = copies
    mnemonicPrefix = true
    indentHeuristic = on
    wsErrorHighlight = all
    statGraphWidth = 50
    colorMoved = zebra

[diff "csharp"]
    xfuncname = ^[[:space:]]*(((static|public|internal|private|protected|new|virtual|sealed|override|unsafe|async|partial)[[:space:]]+)*[][<>@.~_[:alnum:]]+[[:space:]]+[<>@._[:alnum:]]+[[:space:]]*\\([^\\(\\)]*)\\)?[[:space:]]*$

[commit]
    status = false

[rerere]
    enabled = true

[core]
    #modify files as appropriate
    excludesfile = C:/Users/james.uffindell/.gitglobal
    attributesfile = C:/Users/james.uffindell/.gitattributes
    pager = less -r

[color]
    ui = always

[rebase]
    #just so that we get rewarded if we do our rebase-planning properly
    autosquash = true
    #force explicit dropping of commits in interactive rebase rather than just allowing lines to be deleted
    missingCommitsCheck = error

#keystrokes are precious, don't make me hit enter unnecessarily
[interactive]
    singleKey = true

[grep]
    patternType = perl
    lineNumber = true

[advice]
    #I know how HEAD works by now
    detachedHead = false

[branch]
    #I don't like the branch auto-tracking, use git bt to make them start tracking something
    autosetupmerge = false

#standard template location for, eg, shared git hooks
[init]
    #modify this filepath as appropriate
    templatedir = C:/Users/james.uffindell/.git_template
